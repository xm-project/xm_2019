<launch>

  <arg name="battery_runtime" default="60" />
  <arg name="map" default="blank_map.yaml" />
  
  
  <node name="map_server" pkg="map_server" type="map_server" args="$(find rbx2_nav)/maps/$(arg map)" />
  
 
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" clear_params="true" output="screen">
     <rosparam file="$(find rbx2_nav)/config/fake/costmap_common_params.yaml" command="load" ns="global_costmap" />
     <rosparam file="$(find rbx2_nav)/config/fake/costmap_common_params.yaml" command="load" ns="local_costmap" />
     <rosparam file="$(find rbx2_nav)/config/fake/local_costmap_params.yaml" command="load" />
     <rosparam file="$(find rbx2_nav)/config/fake/global_costmap_params.yaml" command="load" />
     <rosparam file="$(find rbx2_nav)/config/fake/base_local_planner_params.yaml" command="load" />
     <rosparam file="$(find rbx2_nav)/config/nav_test_params.yaml" command="load" />

  </node>
  
  <include file="$(find rbx2_utils)/launch/battery_simulator.launch">
     <arg name="battery_runtime" value="$(arg battery_runtime)" />
  </include>
  
  <node pkg="fake_localization" type="fake_localization" name="fake_localization" clear_params="true" output="screen">
     <remap from="base_pose_ground_truth" to="odom" />
     <param name="global_frame_id" value="map" />
     <param name="base_frame_id" value="base_footprint" />
  </node>

  <include file="$(find pi_robot_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>
   
  
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find pi_robot_moveit_config)/launch/gdb_settings.gdb --ex run --args" />
  
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  
  <include ns="move_group" file="$(find pi_robot_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  
  <include ns="move_group" file="$(find pi_robot_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="pi_robot" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  
  <include ns="move_group" file="$(find pi_robot_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="pi_robot" />
  </include>

  
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				      move_group/MoveGroupExecuteService
				      move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupPickPlaceAction
				      move_group/MoveGroupPlanService
				      move_group/MoveGroupQueryPlannersService
				      move_group/MoveGroupStateValidationService
				      move_group/MoveGroupGetPlanningSceneService
				      move_group/ClearOctomapService
				      " />

   
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>  
  
  
  

</launch>
